/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthImport } from './routes/_auth'
import { Route as IndexImport } from './routes/index'
import { Route as AuthLoginImport } from './routes/auth.login'
import { Route as AuthCallbackImport } from './routes/auth.callback'
import { Route as AuthProjectsIndexImport } from './routes/_auth.projects.index'
import { Route as AuthProjectsProjectUuidImport } from './routes/_auth.projects.$projectUuid'
import { Route as AuthProjectsProjectUuidTracesImport } from './routes/_auth.projects.$projectUuid.traces'
import { Route as AuthProjectsProjectUuidFunctionsIndexImport } from './routes/_auth.projects.$projectUuid.functions.index'
import { Route as AuthProjectsProjectUuidFunctionsFunctionNameSplatImport } from './routes/_auth.projects.$projectUuid.functions.$functionName.$'

// Create Virtual Routes

const DiffLazyImport = createFileRoute('/diff')()

// Create/Update Routes

const DiffLazyRoute = DiffLazyImport.update({
  path: '/diff',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/diff.lazy').then((d) => d.Route))

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthCallbackRoute = AuthCallbackImport.update({
  path: '/auth/callback',
  getParentRoute: () => rootRoute,
} as any)

const AuthProjectsIndexRoute = AuthProjectsIndexImport.update({
  path: '/projects/',
  getParentRoute: () => AuthRoute,
} as any)

const AuthProjectsProjectUuidRoute = AuthProjectsProjectUuidImport.update({
  path: '/projects/$projectUuid',
  getParentRoute: () => AuthRoute,
} as any)

const AuthProjectsProjectUuidTracesRoute =
  AuthProjectsProjectUuidTracesImport.update({
    path: '/traces',
    getParentRoute: () => AuthProjectsProjectUuidRoute,
  } as any)

const AuthProjectsProjectUuidFunctionsIndexRoute =
  AuthProjectsProjectUuidFunctionsIndexImport.update({
    path: '/functions/',
    getParentRoute: () => AuthProjectsProjectUuidRoute,
  } as any)

const AuthProjectsProjectUuidFunctionsFunctionNameSplatRoute =
  AuthProjectsProjectUuidFunctionsFunctionNameSplatImport.update({
    path: '/functions/$functionName/$',
    getParentRoute: () => AuthProjectsProjectUuidRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/diff': {
      id: '/diff'
      path: '/diff'
      fullPath: '/diff'
      preLoaderRoute: typeof DiffLazyImport
      parentRoute: typeof rootRoute
    }
    '/auth/callback': {
      id: '/auth/callback'
      path: '/auth/callback'
      fullPath: '/auth/callback'
      preLoaderRoute: typeof AuthCallbackImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/_auth/projects/$projectUuid': {
      id: '/_auth/projects/$projectUuid'
      path: '/projects/$projectUuid'
      fullPath: '/projects/$projectUuid'
      preLoaderRoute: typeof AuthProjectsProjectUuidImport
      parentRoute: typeof AuthImport
    }
    '/_auth/projects/': {
      id: '/_auth/projects/'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof AuthProjectsIndexImport
      parentRoute: typeof AuthImport
    }
    '/_auth/projects/$projectUuid/traces': {
      id: '/_auth/projects/$projectUuid/traces'
      path: '/traces'
      fullPath: '/projects/$projectUuid/traces'
      preLoaderRoute: typeof AuthProjectsProjectUuidTracesImport
      parentRoute: typeof AuthProjectsProjectUuidImport
    }
    '/_auth/projects/$projectUuid/functions/': {
      id: '/_auth/projects/$projectUuid/functions/'
      path: '/functions'
      fullPath: '/projects/$projectUuid/functions'
      preLoaderRoute: typeof AuthProjectsProjectUuidFunctionsIndexImport
      parentRoute: typeof AuthProjectsProjectUuidImport
    }
    '/_auth/projects/$projectUuid/functions/$functionName/$': {
      id: '/_auth/projects/$projectUuid/functions/$functionName/$'
      path: '/functions/$functionName/$'
      fullPath: '/projects/$projectUuid/functions/$functionName/$'
      preLoaderRoute: typeof AuthProjectsProjectUuidFunctionsFunctionNameSplatImport
      parentRoute: typeof AuthProjectsProjectUuidImport
    }
  }
}

// Create and export the route tree

interface AuthProjectsProjectUuidRouteChildren {
  AuthProjectsProjectUuidTracesRoute: typeof AuthProjectsProjectUuidTracesRoute
  AuthProjectsProjectUuidFunctionsIndexRoute: typeof AuthProjectsProjectUuidFunctionsIndexRoute
  AuthProjectsProjectUuidFunctionsFunctionNameSplatRoute: typeof AuthProjectsProjectUuidFunctionsFunctionNameSplatRoute
}

const AuthProjectsProjectUuidRouteChildren: AuthProjectsProjectUuidRouteChildren =
  {
    AuthProjectsProjectUuidTracesRoute: AuthProjectsProjectUuidTracesRoute,
    AuthProjectsProjectUuidFunctionsIndexRoute:
      AuthProjectsProjectUuidFunctionsIndexRoute,
    AuthProjectsProjectUuidFunctionsFunctionNameSplatRoute:
      AuthProjectsProjectUuidFunctionsFunctionNameSplatRoute,
  }

const AuthProjectsProjectUuidRouteWithChildren =
  AuthProjectsProjectUuidRoute._addFileChildren(
    AuthProjectsProjectUuidRouteChildren,
  )

interface AuthRouteChildren {
  AuthProjectsProjectUuidRoute: typeof AuthProjectsProjectUuidRouteWithChildren
  AuthProjectsIndexRoute: typeof AuthProjectsIndexRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthProjectsProjectUuidRoute: AuthProjectsProjectUuidRouteWithChildren,
  AuthProjectsIndexRoute: AuthProjectsIndexRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthRouteWithChildren
  '/diff': typeof DiffLazyRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/auth/login': typeof AuthLoginRoute
  '/projects/$projectUuid': typeof AuthProjectsProjectUuidRouteWithChildren
  '/projects': typeof AuthProjectsIndexRoute
  '/projects/$projectUuid/traces': typeof AuthProjectsProjectUuidTracesRoute
  '/projects/$projectUuid/functions': typeof AuthProjectsProjectUuidFunctionsIndexRoute
  '/projects/$projectUuid/functions/$functionName/$': typeof AuthProjectsProjectUuidFunctionsFunctionNameSplatRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthRouteWithChildren
  '/diff': typeof DiffLazyRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/auth/login': typeof AuthLoginRoute
  '/projects/$projectUuid': typeof AuthProjectsProjectUuidRouteWithChildren
  '/projects': typeof AuthProjectsIndexRoute
  '/projects/$projectUuid/traces': typeof AuthProjectsProjectUuidTracesRoute
  '/projects/$projectUuid/functions': typeof AuthProjectsProjectUuidFunctionsIndexRoute
  '/projects/$projectUuid/functions/$functionName/$': typeof AuthProjectsProjectUuidFunctionsFunctionNameSplatRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/diff': typeof DiffLazyRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/auth/login': typeof AuthLoginRoute
  '/_auth/projects/$projectUuid': typeof AuthProjectsProjectUuidRouteWithChildren
  '/_auth/projects/': typeof AuthProjectsIndexRoute
  '/_auth/projects/$projectUuid/traces': typeof AuthProjectsProjectUuidTracesRoute
  '/_auth/projects/$projectUuid/functions/': typeof AuthProjectsProjectUuidFunctionsIndexRoute
  '/_auth/projects/$projectUuid/functions/$functionName/$': typeof AuthProjectsProjectUuidFunctionsFunctionNameSplatRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/diff'
    | '/auth/callback'
    | '/auth/login'
    | '/projects/$projectUuid'
    | '/projects'
    | '/projects/$projectUuid/traces'
    | '/projects/$projectUuid/functions'
    | '/projects/$projectUuid/functions/$functionName/$'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/diff'
    | '/auth/callback'
    | '/auth/login'
    | '/projects/$projectUuid'
    | '/projects'
    | '/projects/$projectUuid/traces'
    | '/projects/$projectUuid/functions'
    | '/projects/$projectUuid/functions/$functionName/$'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/diff'
    | '/auth/callback'
    | '/auth/login'
    | '/_auth/projects/$projectUuid'
    | '/_auth/projects/'
    | '/_auth/projects/$projectUuid/traces'
    | '/_auth/projects/$projectUuid/functions/'
    | '/_auth/projects/$projectUuid/functions/$functionName/$'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  DiffLazyRoute: typeof DiffLazyRoute
  AuthCallbackRoute: typeof AuthCallbackRoute
  AuthLoginRoute: typeof AuthLoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  DiffLazyRoute: DiffLazyRoute,
  AuthCallbackRoute: AuthCallbackRoute,
  AuthLoginRoute: AuthLoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/diff",
        "/auth/callback",
        "/auth/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/projects/$projectUuid",
        "/_auth/projects/"
      ]
    },
    "/diff": {
      "filePath": "diff.lazy.tsx"
    },
    "/auth/callback": {
      "filePath": "auth.callback.tsx"
    },
    "/auth/login": {
      "filePath": "auth.login.tsx"
    },
    "/_auth/projects/$projectUuid": {
      "filePath": "_auth.projects.$projectUuid.tsx",
      "parent": "/_auth",
      "children": [
        "/_auth/projects/$projectUuid/traces",
        "/_auth/projects/$projectUuid/functions/",
        "/_auth/projects/$projectUuid/functions/$functionName/$"
      ]
    },
    "/_auth/projects/": {
      "filePath": "_auth.projects.index.tsx",
      "parent": "/_auth"
    },
    "/_auth/projects/$projectUuid/traces": {
      "filePath": "_auth.projects.$projectUuid.traces.tsx",
      "parent": "/_auth/projects/$projectUuid"
    },
    "/_auth/projects/$projectUuid/functions/": {
      "filePath": "_auth.projects.$projectUuid.functions.index.tsx",
      "parent": "/_auth/projects/$projectUuid"
    },
    "/_auth/projects/$projectUuid/functions/$functionName/$": {
      "filePath": "_auth.projects.$projectUuid.functions.$functionName.$.tsx",
      "parent": "/_auth/projects/$projectUuid"
    }
  }
}
ROUTE_MANIFEST_END */
