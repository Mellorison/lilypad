/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as ProjectsIndexImport } from './routes/projects.index'
import { Route as ProjectsProjectIdImport } from './routes/projects.$projectId'
import { Route as ProjectsLlmfnsIndexImport } from './routes/projects_/llm_fns/index'
import { Route as ProjectsProjectIdTracesImport } from './routes/projects.$projectId.traces'
import { Route as ProjectsProjectIdFunctionsIndexImport } from './routes/projects.$projectId.functions.index'
import { Route as ProjectsProjectIdLlmFnsLlmFunctionIdFnParamsImport } from './routes/projects_/$projectId.llm-fns_.$llmFunctionId.fn-params'
import { Route as ProjectsProjectIdFunctionsFunctionNameVersionsVersionIdImport } from './routes/projects.$projectId.functions.$functionName.versions.$versionId'

// Create Virtual Routes

const DiffLazyImport = createFileRoute('/diff')()

// Create/Update Routes

const DiffLazyRoute = DiffLazyImport.update({
  path: '/diff',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/diff.lazy').then((d) => d.Route))

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsIndexRoute = ProjectsIndexImport.update({
  path: '/projects/',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsProjectIdRoute = ProjectsProjectIdImport.update({
  path: '/projects/$projectId',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsLlmfnsIndexRoute = ProjectsLlmfnsIndexImport.update({
  path: '/projects/llm_fns/',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsProjectIdTracesRoute = ProjectsProjectIdTracesImport.update({
  path: '/traces',
  getParentRoute: () => ProjectsProjectIdRoute,
} as any)

const ProjectsProjectIdFunctionsIndexRoute =
  ProjectsProjectIdFunctionsIndexImport.update({
    path: '/functions/',
    getParentRoute: () => ProjectsProjectIdRoute,
  } as any)

const ProjectsProjectIdLlmFnsLlmFunctionIdFnParamsRoute =
  ProjectsProjectIdLlmFnsLlmFunctionIdFnParamsImport.update({
    path: '/projects/$projectId/llm-fns/$llmFunctionId/fn-params',
    getParentRoute: () => rootRoute,
  } as any)

const ProjectsProjectIdFunctionsFunctionNameVersionsVersionIdRoute =
  ProjectsProjectIdFunctionsFunctionNameVersionsVersionIdImport.update({
    path: '/functions/$functionName/versions/$versionId',
    getParentRoute: () => ProjectsProjectIdRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/diff': {
      id: '/diff'
      path: '/diff'
      fullPath: '/diff'
      preLoaderRoute: typeof DiffLazyImport
      parentRoute: typeof rootRoute
    }
    '/projects/$projectId': {
      id: '/projects/$projectId'
      path: '/projects/$projectId'
      fullPath: '/projects/$projectId'
      preLoaderRoute: typeof ProjectsProjectIdImport
      parentRoute: typeof rootRoute
    }
    '/projects/': {
      id: '/projects/'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsIndexImport
      parentRoute: typeof rootRoute
    }
    '/projects/$projectId/traces': {
      id: '/projects/$projectId/traces'
      path: '/traces'
      fullPath: '/projects/$projectId/traces'
      preLoaderRoute: typeof ProjectsProjectIdTracesImport
      parentRoute: typeof ProjectsProjectIdImport
    }
    '/projects/llm_fns/': {
      id: '/projects/llm_fns/'
      path: '/projects/llm_fns'
      fullPath: '/projects/llm_fns'
      preLoaderRoute: typeof ProjectsLlmfnsIndexImport
      parentRoute: typeof rootRoute
    }
    '/projects/$projectId/functions/': {
      id: '/projects/$projectId/functions/'
      path: '/functions'
      fullPath: '/projects/$projectId/functions'
      preLoaderRoute: typeof ProjectsProjectIdFunctionsIndexImport
      parentRoute: typeof ProjectsProjectIdImport
    }
    '/projects/$projectId/llm-fns/$llmFunctionId/fn-params': {
      id: '/projects/$projectId/llm-fns/$llmFunctionId/fn-params'
      path: '/projects/$projectId/llm-fns/$llmFunctionId/fn-params'
      fullPath: '/projects/$projectId/llm-fns/$llmFunctionId/fn-params'
      preLoaderRoute: typeof ProjectsProjectIdLlmFnsLlmFunctionIdFnParamsImport
      parentRoute: typeof rootRoute
    }
    '/projects/$projectId/functions/$functionName/versions/$versionId': {
      id: '/projects/$projectId/functions/$functionName/versions/$versionId'
      path: '/functions/$functionName/versions/$versionId'
      fullPath: '/projects/$projectId/functions/$functionName/versions/$versionId'
      preLoaderRoute: typeof ProjectsProjectIdFunctionsFunctionNameVersionsVersionIdImport
      parentRoute: typeof ProjectsProjectIdImport
    }
  }
}

// Create and export the route tree

interface ProjectsProjectIdRouteChildren {
  ProjectsProjectIdTracesRoute: typeof ProjectsProjectIdTracesRoute
  ProjectsProjectIdFunctionsIndexRoute: typeof ProjectsProjectIdFunctionsIndexRoute
  ProjectsProjectIdFunctionsFunctionNameVersionsVersionIdRoute: typeof ProjectsProjectIdFunctionsFunctionNameVersionsVersionIdRoute
}

const ProjectsProjectIdRouteChildren: ProjectsProjectIdRouteChildren = {
  ProjectsProjectIdTracesRoute: ProjectsProjectIdTracesRoute,
  ProjectsProjectIdFunctionsIndexRoute: ProjectsProjectIdFunctionsIndexRoute,
  ProjectsProjectIdFunctionsFunctionNameVersionsVersionIdRoute:
    ProjectsProjectIdFunctionsFunctionNameVersionsVersionIdRoute,
}

const ProjectsProjectIdRouteWithChildren =
  ProjectsProjectIdRoute._addFileChildren(ProjectsProjectIdRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/diff': typeof DiffLazyRoute
  '/projects/$projectId': typeof ProjectsProjectIdRouteWithChildren
  '/projects': typeof ProjectsIndexRoute
  '/projects/$projectId/traces': typeof ProjectsProjectIdTracesRoute
  '/projects/llm_fns': typeof ProjectsLlmfnsIndexRoute
  '/projects/$projectId/functions': typeof ProjectsProjectIdFunctionsIndexRoute
  '/projects/$projectId/llm-fns/$llmFunctionId/fn-params': typeof ProjectsProjectIdLlmFnsLlmFunctionIdFnParamsRoute
  '/projects/$projectId/functions/$functionName/versions/$versionId': typeof ProjectsProjectIdFunctionsFunctionNameVersionsVersionIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/diff': typeof DiffLazyRoute
  '/projects/$projectId': typeof ProjectsProjectIdRouteWithChildren
  '/projects': typeof ProjectsIndexRoute
  '/projects/$projectId/traces': typeof ProjectsProjectIdTracesRoute
  '/projects/llm_fns': typeof ProjectsLlmfnsIndexRoute
  '/projects/$projectId/functions': typeof ProjectsProjectIdFunctionsIndexRoute
  '/projects/$projectId/llm-fns/$llmFunctionId/fn-params': typeof ProjectsProjectIdLlmFnsLlmFunctionIdFnParamsRoute
  '/projects/$projectId/functions/$functionName/versions/$versionId': typeof ProjectsProjectIdFunctionsFunctionNameVersionsVersionIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/diff': typeof DiffLazyRoute
  '/projects/$projectId': typeof ProjectsProjectIdRouteWithChildren
  '/projects/': typeof ProjectsIndexRoute
  '/projects/$projectId/traces': typeof ProjectsProjectIdTracesRoute
  '/projects/llm_fns/': typeof ProjectsLlmfnsIndexRoute
  '/projects/$projectId/functions/': typeof ProjectsProjectIdFunctionsIndexRoute
  '/projects/$projectId/llm-fns/$llmFunctionId/fn-params': typeof ProjectsProjectIdLlmFnsLlmFunctionIdFnParamsRoute
  '/projects/$projectId/functions/$functionName/versions/$versionId': typeof ProjectsProjectIdFunctionsFunctionNameVersionsVersionIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/diff'
    | '/projects/$projectId'
    | '/projects'
    | '/projects/$projectId/traces'
    | '/projects/llm_fns'
    | '/projects/$projectId/functions'
    | '/projects/$projectId/llm-fns/$llmFunctionId/fn-params'
    | '/projects/$projectId/functions/$functionName/versions/$versionId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/diff'
    | '/projects/$projectId'
    | '/projects'
    | '/projects/$projectId/traces'
    | '/projects/llm_fns'
    | '/projects/$projectId/functions'
    | '/projects/$projectId/llm-fns/$llmFunctionId/fn-params'
    | '/projects/$projectId/functions/$functionName/versions/$versionId'
  id:
    | '__root__'
    | '/'
    | '/diff'
    | '/projects/$projectId'
    | '/projects/'
    | '/projects/$projectId/traces'
    | '/projects/llm_fns/'
    | '/projects/$projectId/functions/'
    | '/projects/$projectId/llm-fns/$llmFunctionId/fn-params'
    | '/projects/$projectId/functions/$functionName/versions/$versionId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DiffLazyRoute: typeof DiffLazyRoute
  ProjectsProjectIdRoute: typeof ProjectsProjectIdRouteWithChildren
  ProjectsIndexRoute: typeof ProjectsIndexRoute
  ProjectsLlmfnsIndexRoute: typeof ProjectsLlmfnsIndexRoute
  ProjectsProjectIdLlmFnsLlmFunctionIdFnParamsRoute: typeof ProjectsProjectIdLlmFnsLlmFunctionIdFnParamsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DiffLazyRoute: DiffLazyRoute,
  ProjectsProjectIdRoute: ProjectsProjectIdRouteWithChildren,
  ProjectsIndexRoute: ProjectsIndexRoute,
  ProjectsLlmfnsIndexRoute: ProjectsLlmfnsIndexRoute,
  ProjectsProjectIdLlmFnsLlmFunctionIdFnParamsRoute:
    ProjectsProjectIdLlmFnsLlmFunctionIdFnParamsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/diff",
        "/projects/$projectId",
        "/projects/",
        "/projects/llm_fns/",
        "/projects/$projectId/llm-fns/$llmFunctionId/fn-params"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/diff": {
      "filePath": "diff.lazy.tsx"
    },
    "/projects/$projectId": {
      "filePath": "projects.$projectId.tsx",
      "children": [
        "/projects/$projectId/traces",
        "/projects/$projectId/functions/",
        "/projects/$projectId/functions/$functionName/versions/$versionId"
      ]
    },
    "/projects/": {
      "filePath": "projects.index.tsx"
    },
    "/projects/$projectId/traces": {
      "filePath": "projects.$projectId.traces.tsx",
      "parent": "/projects/$projectId"
    },
    "/projects/llm_fns/": {
      "filePath": "projects_/llm_fns/index.tsx"
    },
    "/projects/$projectId/functions/": {
      "filePath": "projects.$projectId.functions.index.tsx",
      "parent": "/projects/$projectId"
    },
    "/projects/$projectId/llm-fns/$llmFunctionId/fn-params": {
      "filePath": "projects_/$projectId.llm-fns_.$llmFunctionId.fn-params.tsx"
    },
    "/projects/$projectId/functions/$functionName/versions/$versionId": {
      "filePath": "projects.$projectId.functions.$functionName.versions.$versionId.tsx",
      "parent": "/projects/$projectId"
    }
  }
}
ROUTE_MANIFEST_END */
