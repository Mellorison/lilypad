"""Remove prompt and response_model table

Revision ID: 0016
Revises: 0015
Create Date: 2025-02-28 17:19:57.989612

"""

from collections.abc import Sequence

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import sqlite
from sqlmodel.sql.sqltypes import AutoString

from lilypad.server.models.base_sql_model import JSONTypeDecorator

# revision identifiers, used by Alembic.
revision: str = "0016"
down_revision: str | None = "0015"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("generations", schema=None) as batch_op:
        batch_op.add_column(sa.Column("prompt_template", AutoString(), nullable=True))
        batch_op.add_column(sa.Column("provider", AutoString(), nullable=True))
        batch_op.add_column(sa.Column("model", AutoString(), nullable=True))
        batch_op.add_column(
            sa.Column("call_params", JSONTypeDecorator(), nullable=True)
        )
        batch_op.drop_constraint(
            "generations_response_model_uuid_response_models_fkey", type_="foreignkey"
        )
        batch_op.drop_constraint(
            "generations_prompt_uuid_prompts_fkey", type_="foreignkey"
        )
        batch_op.drop_column("prompt_uuid")
        batch_op.drop_column("response_model_uuid")

    with op.batch_alter_table("spans", schema=None) as batch_op:
        batch_op.drop_constraint("spans_prompt_uuid_prompts_fkey", type_="foreignkey")
        batch_op.drop_constraint(
            "spans_response_model_uuid_response_models_fkey", type_="foreignkey"
        )
        batch_op.drop_column("prompt_uuid")
        batch_op.drop_column("response_model_uuid")

    with op.batch_alter_table("response_models", schema=None) as batch_op:
        batch_op.drop_index("response_models_hash_idx")
        batch_op.drop_index("response_models_name_idx")
        batch_op.drop_index("response_models_organization_uuid_idx")
    op.drop_table("response_models")

    with op.batch_alter_table("prompts", schema=None) as batch_op:
        batch_op.drop_index("prompts_archived_idx")
        batch_op.drop_index("prompts_hash_idx")
        batch_op.drop_index("prompts_name_idx")
        batch_op.drop_index("prompts_organization_uuid_idx")
    op.drop_table("prompts")

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("spans", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column("response_model_uuid", sa.CHAR(length=32), nullable=True)
        )
        batch_op.add_column(sa.Column("prompt_uuid", sa.CHAR(length=32), nullable=True))
        batch_op.create_foreign_key(
            "spans_response_model_uuid_response_models_fkey",
            "response_models",
            ["response_model_uuid"],
            ["uuid"],
            ondelete="CASCADE",
        )
        batch_op.create_foreign_key(
            "spans_prompt_uuid_prompts_fkey",
            "prompts",
            ["prompt_uuid"],
            ["uuid"],
            ondelete="CASCADE",
        )

    with op.batch_alter_table("generations", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column("response_model_uuid", sa.CHAR(length=32), nullable=True)
        )
        batch_op.add_column(sa.Column("prompt_uuid", sa.CHAR(length=32), nullable=True))
        batch_op.create_foreign_key(
            "generations_prompt_uuid_prompts_fkey",
            "prompts",
            ["prompt_uuid"],
            ["uuid"],
            ondelete="CASCADE",
        )
        batch_op.create_foreign_key(
            "generations_response_model_uuid_response_models_fkey",
            "response_models",
            ["response_model_uuid"],
            ["uuid"],
            ondelete="CASCADE",
        )
        batch_op.drop_column("call_params")
        batch_op.drop_column("model")
        batch_op.drop_column("provider")
        batch_op.drop_column("prompt_template")

    op.create_table(
        "response_models",
        sa.Column("uuid", sa.CHAR(length=32), nullable=False),
        sa.Column("created_at", sa.DATETIME(), nullable=False),
        sa.Column("organization_uuid", sa.CHAR(length=32), nullable=False),
        sa.Column("project_uuid", sa.CHAR(length=32), nullable=True),
        sa.Column("name", sa.VARCHAR(), nullable=False),
        sa.Column("signature", sa.VARCHAR(), nullable=False),
        sa.Column("code", sa.VARCHAR(), nullable=False),
        sa.Column("hash", sa.VARCHAR(), nullable=False),
        sa.Column("dependencies", sqlite.JSON(), nullable=True),
        sa.Column("schema_data", sqlite.JSON(), nullable=True),
        sa.Column("examples", sqlite.JSON(), nullable=True),
        sa.Column("is_active", sa.BOOLEAN(), nullable=False),
        sa.ForeignKeyConstraint(
            ["organization_uuid"],
            ["organizations.uuid"],
            name="response_models_organization_uuid_organizations_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["project_uuid"],
            ["projects.uuid"],
            name="response_models_project_uuid_projects_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("uuid", name="response_models_pkey"),
    )
    with op.batch_alter_table("response_models", schema=None) as batch_op:
        batch_op.create_index(
            "response_models_organization_uuid_idx", ["organization_uuid"], unique=False
        )
        batch_op.create_index("response_models_name_idx", ["name"], unique=False)
        batch_op.create_index("response_models_hash_idx", ["hash"], unique=False)

    op.create_table(
        "prompts",
        sa.Column("uuid", sa.CHAR(length=32), nullable=False),
        sa.Column("created_at", sa.DATETIME(), nullable=False),
        sa.Column("organization_uuid", sa.CHAR(length=32), nullable=False),
        sa.Column("project_uuid", sa.CHAR(length=32), nullable=True),
        sa.Column("version_num", sa.INTEGER(), nullable=True),
        sa.Column("name", sa.VARCHAR(), nullable=False),
        sa.Column("signature", sa.VARCHAR(), nullable=False),
        sa.Column("code", sa.VARCHAR(), nullable=False),
        sa.Column("hash", sa.VARCHAR(), nullable=False),
        sa.Column("dependencies", sqlite.JSON(), nullable=True),
        sa.Column("template", sa.VARCHAR(), nullable=False),
        sa.Column("is_default", sa.BOOLEAN(), nullable=False),
        sa.Column("call_params", sqlite.JSON(), nullable=True),
        sa.Column("arg_types", sqlite.JSON(), nullable=True),
        sa.Column("archived", sa.DATETIME(), nullable=True),
        sa.ForeignKeyConstraint(
            ["organization_uuid"],
            ["organizations.uuid"],
            name="prompts_organization_uuid_organizations_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["project_uuid"],
            ["projects.uuid"],
            name="prompts_project_uuid_projects_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("uuid", name="prompts_pkey"),
    )
    with op.batch_alter_table("prompts", schema=None) as batch_op:
        batch_op.create_index(
            "prompts_organization_uuid_idx", ["organization_uuid"], unique=False
        )
        batch_op.create_index("prompts_name_idx", ["name"], unique=False)
        batch_op.create_index("prompts_hash_idx", ["hash"], unique=False)
        batch_op.create_index("prompts_archived_idx", ["archived"], unique=False)

    # ### end Alembic commands ###
