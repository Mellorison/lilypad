"""Add tool table

Revision ID: 0013
Revises: 0012
Create Date: 2025-02-21 12:49:01.245594

"""

from collections.abc import Sequence

import sqlalchemy as sa
from alembic import op
from sqlmodel import AutoString

from lilypad.server.models import JSONTypeDecorator

# revision identifiers, used by Alembic.
revision: str = "0013"
down_revision: str | None = "0012"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "tools",
        sa.Column("uuid", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("organization_uuid", sa.Uuid(), nullable=False),
        sa.Column("name", AutoString(), nullable=False),
        sa.Column("signature", AutoString(), nullable=False),
        sa.Column("code", AutoString(), nullable=False),
        sa.Column("hash", AutoString(), nullable=False),
        sa.Column(
            "dependencies",
            JSONTypeDecorator(),
            nullable=True,
        ),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("project_uuid", sa.Uuid(), nullable=True),
        sa.Column("generation_uuid", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(
            ["generation_uuid"],
            ["generations.uuid"],
            name=op.f("tools_generation_uuid_generations_fkey"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["organization_uuid"],
            ["organizations.uuid"],
            name=op.f("tools_organization_uuid_organizations_fkey"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["project_uuid"],
            ["projects.uuid"],
            name=op.f("tools_project_uuid_projects_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("uuid", name=op.f("tools_pkey")),
    )
    with op.batch_alter_table("tools", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("tools_hash_idx"), ["hash"], unique=False)
        batch_op.create_index(batch_op.f("tools_name_idx"), ["name"], unique=False)
        batch_op.create_index(
            batch_op.f("tools_organization_uuid_idx"),
            ["organization_uuid"],
            unique=False,
        )

    with op.batch_alter_table("generations", schema=None) as batch_op:
        batch_op.add_column(sa.Column("prompt_template", AutoString(), nullable=True))
        batch_op.add_column(
            sa.Column(
                "call_params",
                JSONTypeDecorator(),
                nullable=True,
            )
        )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("generations", schema=None) as batch_op:
        batch_op.drop_column("call_params")
        batch_op.drop_column("prompt_template")

    with op.batch_alter_table("tools", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("tools_organization_uuid_idx"))
        batch_op.drop_index(batch_op.f("tools_name_idx"))
        batch_op.drop_index(batch_op.f("tools_hash_idx"))

    op.drop_table("tools")
    # ### end Alembic commands ###
